{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "logicAppName": {
      "type": "string",
      "defaultValue": "jhffj",
      "minLength": 1,
      "maxLength": 80,
      "metadata": {
        "description": "Name of the Logic App."
      }
    },
    "logicAppLocation": {
      "type": "string",
      "defaultValue": "eastus",
      "allowedValues": [
        "[resourceGroup().location]",
        "eastasia",
        "southeastasia",
        "centralus",
        "eastus",
        "eastus2",
        "westus",
        "northcentralus",
        "southcentralus",
        "northeurope",
        "westeurope",
        "japanwest",
        "japaneast",
        "brazilsouth",
        "australiaeast",
        "australiasoutheast",
        "southindia",
        "centralindia",
        "westindia",
        "canadacentral",
        "canadaeast",
        "uksouth",
        "ukwest",
        "westcentralus",
        "westus2",
        "koreacentral",
        "koreasouth",
        "francecentral",
        "francesouth",
        "uaecentral",
        "uaenorth",
        "southafricanorth",
        "southafricawest",
        "switzerlandnorth",
        "switzerlandwest",
        "germanynorth",
        "germanywestcentral",
        "norwayeast",
        "brazilsoutheast"
      ],
      "metadata": {
        "description": "Location of the Logic App."
      }
    },
    "integrationServiceEnvironment": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Integration Service Environment"
      }
    },
    "integrationAccount": {
      "type": "string",
      "defaultValue": "rg-apiplatform-nonprd/ia-iseapiplatform-nonprd",
      "metadata": {
        "description": "Integration Account"
      }
    },
    "servicebusNamespace": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the Logic App."
      }
    },
    "logAnalyticsWS": {
      "type": "string",
      "defaultValue": "rg-logging-nonprd-eus/law-shared-nonprd",
      "metadata": {
        "description": "Log Analytics Workspace"
      }
    },
    "nestedLogicApp": {
      "type": "string",
      "defaultValue": "rg-integration-systemapp-dev/lapp-core-bloboperation",
      "metadata": {
        "description": "Integration Service Environment"
      }
    },
    "folder": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Trigger location"
      }
    },
    "functionApp": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Integration Service Environment"
      }
    },
    "environment": {
      "type": "string",
      "defaultValue": "dev",
      "metadata": {
        "description": "environment"
      }
    }
  },
  "variables": {
    "varISEParams": "[split(parameters('integrationServiceEnvironment'),'/')]",
    "varISEId": "[resourceId(variables('varISEParams')[0] ,'Microsoft.Logic/integrationServiceEnvironments', variables('varISEParams')[1])]",
    "varIAParams": "[split(parameters('integrationAccount'),'/')]",
    "varIAId": "[resourceId(variables('varIAParams')[0] ,'Microsoft.Logic/integrationAccounts', variables('varIAParams')[1])]",
    "varSbParams": "[split(parameters('servicebusNamespace'),'/')]",
    "varAuthRuleResourceId": "[resourceId(variables('varSbParams')[0],'Microsoft.ServiceBus/namespaces/authorizationRules', variables('varSbParams')[1], 'RootManageSharedAccessKey')]",
    "vardiagnosticSettingName": "[concat('diags-',  parameters('logicAppName'))]",
    "varWSParams": "[split(parameters('logAnalyticsWS'),'/')]",
    "varworkspaceId": "[resourceId(variables('varWSParams')[0],'Microsoft.OperationalInsights/workspaces/', variables('varWSParams')[1])]",
    "varNestedLogicAppParamsBlob": "[split(parameters('nestedLogicApp'),'/')]",
    "varNestedLogicAppResIdBlob": "[resourceId(variables('varNestedLogicAppParamsBlob')[0] ,'Microsoft.Logic/workflows', variables('varNestedLogicAppParamsBlob')[1])]",
    "varFunctionParams": "[split(parameters('functionApp'),'/')]",
    "varFuncResIdErrorParser": "[resourceId(variables('varFunctionParams')[0] ,'Microsoft.Web/sites/functions', variables('varFunctionParams')[1], 'ErrorParser')]"

  },
  "resources": [
    {
      "name": "[parameters('logicAppName')]",
      "type": "Microsoft.Logic/workflows",
      "location": "[parameters('logicAppLocation')]",
      "tags": {
        "Company": "lyb",
        "Domain": "integration",
        "FunctionalArea": "",
        "SubFunction": "",
        "Connector": "",
        "Cloud provider": "az",
        "Region": "eus"
      },
      "apiVersion": "2016-06-01",
      "resources": [
        {
          "type": "providers/diagnosticSettings",
          "name": "[concat('Microsoft.Insights/', variables('vardiagnosticSettingName'))]",
          "dependsOn": [
            "[resourceId('Microsoft.Logic/workflows', parameters('logicAppName'))]"
          ],
          "apiVersion": "2017-05-01-preview",
          "properties": {
            "name": "[variables('vardiagnosticSettingName')]",
            "storageAccountId": null,
            "workspaceId": "[variables('varworkspaceId')]",
            "logs": [
              {
                "category": "WorkflowRuntime",
                "enabled": true,
                "retentionPolicy": {
                  "days": 0,
                  "enabled": false
                }
              }
            ],
            "metrics": [
              {
                "timeGrain": "PT1M",
                "enabled": false,
                "retentionPolicy": {
                  "enabled": false,
                  "days": 0
                }
              }
            ]
          }
        }
      ],
      "properties": {
        "state": "Disabled",
        "integrationServiceEnvironment": {
          "id": "[variables('varISEId')]"
        },
        "integrationAccount": {
          "id": "[variables('varIAId')]"
        },
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "actions": {
            "Handle_Exceptions": {
              "type": "Scope",
              "actions": {
                "Filter_Error_Object": {
                  "type": "Query",
                  "inputs": {
                    "from": "@result('Scope_Publish_Message')",
                    "where": "@equals(item()['status'], 'Failed')"
                  },
                  "runAfter": {}
                },
                "For_each": {
                  "actions": {
                    "ErrorParser": {
                      "inputs": {
                        "body": "@items('For_each')",
                        "function": {
                          "id": "[variables('varFuncResIdErrorParser')]"
                          //"id": "/subscriptions/bf5c2e74-56c8-49ac-adef-0c9f27dfeca9/resourceGroups/rg-integration-common-dev/providers/Microsoft.Web/sites/azfun-integration-lyb/functions/ErrorParser"
                        }
                      },
                      "runAfter": {},
                      "type": "Function"
                    },
                    "Send_Exception_Message_To_Audit_Queue": {
                      "inputs": {
                        "body": {
                          "ContentData": "@{base64(concat('{','\n','    \"trackType\": \"ERROR\",','\n','    \"runId\": \"',workflow()['run']['name'],'\",','\n','    \"error\": {','\n','        \"code\": \"',body('ErrorParser')?['code'],'\",','\n','        \"message\": \"',body('ErrorParser')?['message'],'\"','\n','    }','\n','}','\n'))}",
                          "ContentType": "application/json"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['servicebus']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/@{encodeURIComponent(encodeURIComponent('sbq-snd-audit-all'))}/messages",
                        "queries": {
                          "systemProperties": "Run Details"
                        }
                      },
                      "runAfter": {
                        "ErrorParser": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection"
                    }
                  },
                  "foreach": "@body('Filter_Error_Object')",
                  "runAfter": {
                    "Filter_Error_Object": [
                      "Succeeded"
                    ]
                  },
                  "type": "Foreach"
                }
              },
              "runAfter": {
                "Scope_Publish_Message": [
                  "Failed",
                  "TimedOut"
                ]
              }
            },
            "Scope_Publish_Message": {
              "type": "Scope",
              "actions": {
                "Delete_File_From_Source": {
                  "type": "ApiConnection",
                  "inputs": {
                    "host": {
                      "connection": {
                        "name": "@parameters('$connections')['%SELECTCONNTYPE%']['connectionId']"
                      }
                    },
                    "method": "delete",
                    "headers": {
                      "SkipDeleteIfFileNotFoundOnServer": false
                    },
                    "path": "/datasets/default/files/@{encodeURIComponent(encodeURIComponent(triggerBody()?['Path']))}"
                  },
                  "runAfter": {
                    "Get_file_content_using_path": [
                      "Succeeded"
                    ]
                  }
                },
                "Get_file_content_using_path": {
                  "type": "ApiConnection",
                  "inputs": {
                    "host": {
                      "connection": {
                        "name": "@parameters('$connections')['%SELECTCONNTYPE%']['connectionId']"
                      }
                    },
                    "method": "get",
                    "path": "/datasets/default/GetFileContentByPath",
                    "queries": {
                      "path": "@triggerBody()?['Path']",
                      "queryParametersSingleEncoded": true,
                      "inferContentType": true
                    }
                  },
                  "runAfter": {}
                }
              },
              "runAfter": {
                "Initialize_Track_Object_Variable": [
                  "Succeeded"
                ]
              }
            },
            "Initialize_TrackingId_variable": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "var_trackingId",
                    "type": "string",
                    "value": "@{guid()}"
                  }
                ]
              },
              "runAfter": {}
            },
            "Initialize_Track_Object_Variable": {
              "inputs": {
                "variables": [
                  {
                    "name": "var_trackObject",
                    "type": "object",
                    "value": {
                      "SourceFileName": "@triggerBody()?['Name']",
                      "SourceFilePath": "@triggerBody()?['Path']",
                      "SvcStart": "@utcNow('yyyy-MM-ddTHH:mm:ss')",
                      "SvcName": ""
                    }
                  }
                ]
              },
              "runAfter": {
                "Initialize_TrackingId_variable": [
                  "Succeeded"
                ]
              },
              "trackedProperties": {
                "SourceFileName": "@action().inputs.variables[0].value",
                "SvcName": "%APPNAME%"
              },
              "type": "InitializeVariable"
            },
            "Send_Audit_Message_To_Queue": {
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['servicebus']['connectionId']"
                  }
                },
                "method": "post",
                "body": [
                  {
                    "ContentData": "@{base64(concat('{    ','\n','\"trackType\": \"RUN\",   ','\n',' \"run\": {       ','\n','              \"runId\": \"',workflow()['run']['name'],'\",','\n','              \"name\": \"',workflow()['name']       ,'\",','\n','             \"correlationId\": \"',string(variables('var_trackingId')),'\"','\n','         }','\n','}'))}",
                    "ContentType": "application/json"
                  },
                  {
                    "ContentData": "@{base64(concat('{','\n','    \"trackType\": \"PROPERTY\", ','\n','   \"runId\": \"',workflow()['run']['name'],'\",','\n','  \"properties\":  ',variables('var_trackObject'),' ','\n','}','\n','}'))}",
                    "ContentType": "application/json"
                  }
                ],
                "path": "/@{encodeURIComponent(encodeURIComponent('sbq-snd-audit-all'))}/messages/batch",
                "queries": {
                  "systemProperties": "Run Details"
                }
              },
              "runAfter": {
                "Initialize_Track_Object_Variable": [
                  "Succeeded"
                ]
              }
            }
          },
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "triggers": {
            "When_files_are_added_or_modified_(properties_only)": {
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['%SELECTCONNTYPE%']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/datasets/default/triggers/batch/onupdatedfile",
                "queries": {
                  "folderId": "[parameters('folder')]",
                  "maxFileCount": 10
                }
              },
              "recurrence": {
                "frequency": "Second",
                "interval": 10
              },
              "splitOn": "@triggerBody()"
            }
          },
          "contentVersion": "1.0.0.0",
          "outputs": {}
        },
        "parameters": {
          "$connections": {
            "value": {
              "servicebus": {
                "id": "[concat(variables('varISEId'), '/managedApis/servicebus')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('varsbConnectionName'))]",
                "connectionName": "[variables('varsbConnectionName')]"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', variables('varsbConnectionName'))]"
      ]
    },
  {
      "type": "MICROSOFT.WEB/CONNECTIONS",
      "apiVersion": "2018-07-01-preview",
      "name": "[variables('varsbConnectionName')]",
      "location": "[parameters('logicAppLocation')]",
      "properties": {
        "api": {
          "id": "[concat(variables('varISEId'), '/managedApis/servicebus')]"
        },
        "displayName": "[variables('varsbConnectionName')]",
        "parameterValues": {
          "connectionString": "[listkeys(variables('varAuthRuleResourceId'), '2017-04-01').primaryConnectionString]"
        }
      }
    }
  ],
  "outputs": {}
}